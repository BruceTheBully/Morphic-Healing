<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Semantic Fold Pressure Visualizer</title>
  <style>
    body {
      background: #000;
      color: #0ff;
      font-family: monospace;
      text-align: center;
      margin: 0;
    }
    h1 {
      margin: 20px;
      text-shadow: 0 0 10px #0ff;
    }
    canvas {
      background: #111;
      border: 2px solid #0ff6;
      box-shadow: 0 0 15px #0ff6;
      margin: 20px auto;
    }
    .sliders {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
    }
    .slider-group {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    input[type="range"] {
      width: 160px;
    }
  </style>
</head>
<body>
  <h1>üîÅ Semantic Fold Pressure Simulator</h1>
  <canvas id="foldCanvas" width="800" height="300"></canvas>
  <div class="sliders">
    <div class="slider-group">
      <label>üß© Compression Rate</label>
      <input type="range" min="0.1" max="5" step="0.1" value="1.5" id="compression">
    </div>
    <div class="slider-group">
      <label>üåÄ Semantic Inertia</label>
      <input type="range" min="0.1" max="3" step="0.1" value="1.0" id="inertia">
    </div>
    <div class="slider-group">
      <label>üåê Fold Threshold</label>
      <input type="range" min="0.01" max="2" step="0.01" value="1.0" id="threshold">
    </div>
  </div>

  <script>
    const canvas = document.getElementById("foldCanvas");
    const ctx = canvas.getContext("2d");
    let t = 0;

    const sliders = {
      compression: document.getElementById("compression"),
      inertia: document.getElementById("inertia"),
      threshold: document.getElementById("threshold")
    };

    function draw() {
      const compRate = parseFloat(sliders.compression.value);
      const inertia = parseFloat(sliders.inertia.value);
      const threshold = parseFloat(sliders.threshold.value);
      const width = canvas.width;
      const height = canvas.height;
      const n = 300;

      ctx.clearRect(0, 0, width, height);
      ctx.beginPath();
      let diverged = false;

      for (let i = 0; i <= n; i++) {
        const x = (i / n) * width;
        const f = Math.sin(t * 0.01 + i * 0.03 * compRate);
        const dF = compRate * Math.cos(t * 0.01 + i * 0.03 * compRate); // acceleration
        const tension = inertia * f;
        const y = height / 2 + f * 90;

        if (Math.abs(dF) > tension * threshold) {
          ctx.strokeStyle = "#f0f"; // divergence color
          diverged = true;
        } else {
          ctx.strokeStyle = diverged ? "#0f0" : "#0ff";
        }

        if (i === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
      }

      ctx.lineWidth = 2;
      ctx.stroke();
      t++;
      requestAnimationFrame(draw);
    }

    draw();
  </script>
</body>
</html>