<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mutation as Semantic Refactor</title>
  <style>
    body {
      background: #101010;
      color: #f5f5f5;
      font-family: monospace;
      padding: 20px;
    }
    canvas {
      background: #222;
      border: 1px solid #555;
      display: block;
      margin-top: 20px;
    }
    h1 {
      color: #ffcc00;
    }
  </style>
</head>
<body>
  <h1>ðŸ§¬ Mutation: Semantic Refactor Viewer</h1>
  <p>This simulation shows morph-forms evolving under mutation pressure. Each dot represents a morph projection into the field. Mutation shifts the encoding function and field resonance.</p>
  <canvas id="morphCanvas" width="800" height="400"></canvas>

  <script>
    const canvas = document.getElementById('morphCanvas');
    const ctx = canvas.getContext('2d');

    const points = [];
    const baseGene = { a: 1.0, b: 1.0 };
    const fieldVector = { x: 0.5, y: 0.8 };

    function generateMorph(gene) {
      return {
        x: 400 + 100 * Math.sin(gene.a * fieldVector.x * Math.PI),
        y: 200 + 100 * Math.cos(gene.b * fieldVector.y * Math.PI),
        gene: { ...gene }
      };
    }

    function mutate(gene) {
      return {
        a: gene.a + (Math.random() - 0.5) * 0.3,
        b: gene.b + (Math.random() - 0.5) * 0.3
      };
    }

    function draw() {
      ctx.fillStyle = '#222';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      for (let pt of points) {
        ctx.beginPath();
        ctx.arc(pt.x, pt.y, 5, 0, Math.PI * 2);
        ctx.fillStyle = '#00f0ff';
        ctx.fill();
      }

      ctx.fillStyle = '#ffcc00';
      ctx.fillText("Base Gene (Gâ‚€)", 400 + 110, 200);
      ctx.beginPath();
      ctx.arc(400, 200, 6, 0, Math.PI * 2);
      ctx.fillStyle = '#ffcc00';
      ctx.fill();
    }

    function update() {
      const newGene = mutate(baseGene);
      const morph = generateMorph(newGene);
      points.push(morph);
      if (points.length > 50) points.shift();
    }

    function loop() {
      update();
      draw();
      requestAnimationFrame(loop);
    }

    loop();
  </script>
</body>
</html>