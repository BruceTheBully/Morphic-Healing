<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Recursive Imprint Simulator</title>
  <style>
    body {
      background: #000;
      color: #0ff;
      font-family: monospace;
      text-align: center;
    }
    h1 {
      text-shadow: 0 0 10px #0ff;
    }
    canvas {
      background: #111;
      border: 2px solid #0ff4;
      box-shadow: 0 0 15px #0ff6;
      margin: 20px auto;
      display: block;
    }
    .sliders {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 20px;
    }
    .slider-group {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    input[type="range"] {
      width: 160px;
    }
  </style>
</head>
<body>
  <h1>💾 Recursive Imprint Stability Visualizer</h1>
  <canvas id="canvas" width="800" height="300"></canvas>
  <div class="sliders">
    <div class="slider-group">
      <label>📉 Imprint Decay (δ)</label>
      <input type="range" min="0.001" max="0.2" step="0.001" value="0.01" id="decay">
    </div>
    <div class="slider-group">
      <label>🔁 Recursion Rate (ω)</label>
      <input type="range" min="0.01" max="0.3" step="0.01" value="0.05" id="recursion">
    </div>
    <div class="slider-group">
      <label>🧬 Injection Strength</label>
      <input type="range" min="0.1" max="1.5" step="0.1" value="1.0" id="strength">
    </div>
  </div>

  <script>
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const sliders = {
      decay: document.getElementById("decay"),
      recursion: document.getElementById("recursion"),
      strength: document.getElementById("strength")
    };

    let imprint = 0;
    let time = 0;

    function update() {
      const decay = parseFloat(sliders.decay.value);
      const omega = parseFloat(sliders.recursion.value);
      const strength = parseFloat(sliders.strength.value);
      const collapse = decay > omega;

      imprint *= 1 - decay;
      imprint += Math.sin(time * omega * 10) * strength;

      ctx.fillStyle = "#111";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.beginPath();

      for (let x = 0; x < canvas.width; x++) {
        const y = canvas.height / 2 + Math.sin((time + x) * omega * 0.2) * imprint;
        if (x === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
      }

      ctx.strokeStyle = collapse ? "#f0f" : "#0ff";
      ctx.lineWidth = 2;
      ctx.stroke();

      time += 1;
      requestAnimationFrame(update);
    }

    update();
  </script>
</body>
</html>